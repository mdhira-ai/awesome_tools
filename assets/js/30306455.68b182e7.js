"use strict";(self.webpackChunkawesome_tools=self.webpackChunkawesome_tools||[]).push([[667],{996:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Gui_framework","title":"python + nextjs + pywebview","description":"Read this for more - https://pywebview.flowrl.com/api/","source":"@site/docs/Gui_framework.md","sourceDirName":".","slug":"/Gui_framework","permalink":"/awesome_tools/docs/Gui_framework","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Gui_framework.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Gui Framework","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Awesome Tools","permalink":"/awesome_tools/docs/hello"}}');var i=r(4848),s=r(8453);const a={sidebar_label:"Gui Framework",sidebar_position:2},o="python + nextjs + pywebview",l={},d=[{value:"<strong>folder structure</strong>",id:"folder-structure",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"python--nextjs--pywebview",children:"python + nextjs + pywebview"})}),"\n",(0,i.jsxs)(n.p,{children:["Read this for more - ",(0,i.jsx)(n.a,{href:"https://pywebview.flowrl.com/api/",children:"https://pywebview.flowrl.com/api/"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"create folder"})})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"folder name"}),(0,i.jsx)(n.th,{children:"cmd"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"backend"}),(0,i.jsxs)(n.td,{children:["uv init ",(0,i.jsx)("br",{})," uv run main.py"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"frontend"}),(0,i.jsxs)(n.td,{children:["npm create vite@latest . or  npx create-next-app@latest ",(0,i.jsx)("br",{})," npm install ",(0,i.jsx)("br",{})," npm build"]})]})]})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"we need to install some lib"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"uv add pywebview flask flask-cors pyinstaller"})}),"\n",(0,i.jsx)(n.h2,{id:"folder-structure",children:(0,i.jsx)(n.strong,{children:"folder structure"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"frontend/\r\n\u251c\u2500\u2500 app/\r\n\u251c\u2500\u2500 package.json\r\n\u2514\u2500\u2500 out/\r\n\r\nbackend/\r\n\u251c\u2500\u2500 .venv/\r\n\u251c\u2500\u2500 main.py\r\n\u251c\u2500\u2500 build/\r\n\u2514\u2500\u2500 dist/\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#main.py\r\nimport webview\r\nimport mimetypes\r\n\r\n# Set the default mimetype for .wasm files\r\nmimetypes.add_type("application/wasm", ".wasm")\r\n\r\n# Set the default mimetype for .js files\r\nmimetypes.add_type("application/javascript", ".js")\r\n\r\n# Set the default mimetype for .css files\r\nmimetypes.add_type("text/css", ".css")\r\n\r\n# Set the default mimetype for .json files\r\nmimetypes.add_type("application/json", ".json")\r\n\r\n# Set the default mimetype for .html files\r\nmimetypes.add_type("text/html", ".html")\r\n\r\n# Set the default mimetype for .png files\r\nmimetypes.add_type("image/png", ".png")\r\n\r\n# Set the default mimetype for .jpg files\r\nmimetypes.add_type("image/jpeg", ".jpg")\r\n\r\n# Set the default mimetype for .gif files\r\nmimetypes.add_type("image/gif", ".gif")\r\n\r\n# Set the default mimetype for .ico files\r\nmimetypes.add_type("image/x-icon", ".ico")\r\n\r\n  \r\ndef create_window():\r\n\r\n\xa0 \xa0 title = "myapp"\r\n\xa0 \xa0 window = webview.create_window(\r\n\xa0 \xa0 \xa0 \xa0 title, "../frontend/out/index.html", width=800, height=600\r\n\xa0 \xa0 )\r\n\xa0 \xa0 return window\r\n\r\n\r\ndef main():\r\n\xa0 \xa0 # Create a webview window\r\n\xa0 \xa0 window = create_window()\r\n\xa0 \xa0 # Start the webview event loop\r\n\xa0 \xa0 webview.start(debug=True)\r\n\r\nif __name__ == "__main__":\r\n\r\n\xa0 \xa0 main()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"/* next.config.ts */\r\nimport type { NextConfig } from \"next\";\r\nconst nextConfig: NextConfig = {\r\n\xa0 /* config options here */\r\n\xa0 output: 'export',\r\n\xa0 trailingSlash: true,\r\n\xa0 images: {\r\n\xa0 \xa0 unoptimized: true\r\n\xa0 },\r\n};\r\nexport default nextConfig;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"build the exe file"})}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","create backend/setup.py file"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","create backend/version.py file"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","copy below code and paste it according to the file"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","uv run setup.py"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","you can use inno soft for packaging"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#setup.py\r\n\r\nimport subprocess\r\nimport sys\r\nimport os\r\nimport shutil\r\nfrom version import __version__, __app_name__, __company__, __description__\r\n\r\ndef create_version_file():\r\n\xa0 \xa0 \"\"\"Create a version file for PyInstaller with proper encoding\"\"\"\r\n\xa0 \xa0 # Convert version to comma-separated format\r\n\xa0 \xa0 version_parts = __version__.split('.')\r\n\xa0 \xa0 while len(version_parts) < 4:\r\n\xa0 \xa0 \xa0 \xa0 version_parts.append('0')\r\n\xa0 \xa0 version_tuple = ','.join(version_parts)\r\n\xa0 \xa0 version_template = f\"\"\"# UTF-8\r\n\r\n# For more details about fixed file info 'ffi' see:\r\n# http://msdn.microsoft.com/en-us/library/ms646997.aspx\r\n\r\nVSVersionInfo(\r\n\r\n\xa0 ffi=FixedFileInfo(\r\n\r\n\xa0 \xa0 filevers=({version_tuple}),\r\n\r\n\xa0 \xa0 prodvers=({version_tuple}),\r\n\r\n\xa0 \xa0 mask=0x3f,\r\n\r\n\xa0 \xa0 flags=0x0,\r\n\r\n\xa0 \xa0 OS=0x40004,\r\n\r\n\xa0 \xa0 fileType=0x1,\r\n\r\n\xa0 \xa0 subtype=0x0,\r\n\r\n\xa0 \xa0 date=(0, 0)\r\n\r\n\xa0 ),\r\n\r\n\xa0 kids=[\r\n\r\n\xa0 \xa0 StringFileInfo(\r\n\r\n\xa0 \xa0 \xa0 [\r\n\r\n\xa0 \xa0 \xa0 StringTable(\r\n\r\n\xa0 \xa0 \xa0 \xa0 u'040904B0',\r\n\r\n\xa0 \xa0 \xa0 \xa0 [StringStruct(u'CompanyName', u'{__company__}'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'FileDescription', u'{__description__}'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'FileVersion', u'{__version__}'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'InternalName', u'{__app_name__}'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'LegalCopyright', u'Copyright (c) {__company__}'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'OriginalFilename', u'{__app_name__.replace(\" \", \"\")}.exe'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'ProductName', u'{__app_name__}'),\r\n\r\n\xa0 \xa0 \xa0 \xa0 StringStruct(u'ProductVersion', u'{__version__}')])\r\n\r\n\xa0 \xa0 \xa0 ]),\r\n\r\n\xa0 \xa0 VarFileInfo([VarStruct(u'Translation', [1033, 1200])])\r\n\r\n\xa0 ]\r\n\r\n)\r\n\r\n\"\"\"\r\n\r\n\xa0 \xa0 # Write with UTF-8 encoding explicitly\r\n\r\n\xa0 \xa0 with open('version_info.txt', 'w', encoding='utf-8') as f:\r\n\r\n\xa0 \xa0 \xa0 \xa0 f.write(version_template)\r\n\r\n  \r\n\r\ndef build_executable():\r\n\r\n\xa0 \xa0 print(f\"Building executable v{__version__} with PyInstaller...\")\r\n\r\n\xa0 \xa0 create_version_file()\r\n\r\n\xa0 \xa0 # PyInstaller command with version info\r\n\r\n\xa0 \xa0 cmd = [\r\n\r\n\xa0 \xa0 \xa0 \xa0 'pyinstaller',\r\n\r\n\xa0 \xa0 \xa0 \xa0 '--onefile',\r\n\r\n\xa0 \xa0 \xa0 \xa0 '--windowed',\r\n\r\n\xa0 \xa0 \xa0 \xa0 '--add-data', 'frontend/dist;frontend/dist',\r\n\r\n\xa0 \xa0 \xa0 \xa0 '--version-file', 'version_info.txt',\r\n\r\n\xa0 \xa0 \xa0 \xa0 '--name', __app_name__.replace(' ', ''),\r\n\r\n\xa0 \xa0 \xa0 \xa0 '--hidden-import', 'pkg_resources.py2_warn',\r\n\r\n\xa0 \xa0 \xa0 \xa0 'main.py'\r\n\r\n\xa0 \xa0 ]\r\n\r\n\xa0 \xa0 subprocess.run(cmd, check=True)\r\n\r\n\xa0 \xa0 # Clean up\r\n\r\n\xa0 \xa0 if os.path.exists('version_info.txt'):\r\n\r\n\xa0 \xa0 \xa0 \xa0 os.remove('version_info.txt')\r\n\r\n  \r\n\r\ndef main():\r\n\r\n\xa0 \xa0 try:\r\n\r\n\xa0 \xa0 \xa0 \xa0 build_executable()\r\n\r\n\xa0 \xa0 \xa0 \xa0 print(f\"Build completed! {__app_name__} v{__version__} is ready in the 'dist' folder.\")\r\n\r\n\xa0 \xa0 except subprocess.CalledProcessError as e:\r\n\r\n\xa0 \xa0 \xa0 \xa0 print(f\"Build failed: {e}\")\r\n\r\n\xa0 \xa0 \xa0 \xa0 sys.exit(1)\r\n\r\n  \r\n\r\nif __name__ == '__main__':\r\n\r\n\xa0 \xa0 main()\r\n\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#version.py\r\n__version__ = "1.0.1"\r\n__app_name__ = "PyWebview"\r\n__company__ = "My Company"\r\n__description__ = "PyWebview Flask React Application"\r\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);